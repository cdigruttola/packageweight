/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var e=".js-choice-table-select-all",t=window.$;const c=function(){function c(){var c=this;t(document).on("change",e,(function(e){c.handleSelectAll(e)}))}return c.prototype.handleSelectAll=function(e){var c=t(e.target),n=c.is(":checked");c.closest("table").find("tbody input:checkbox").prop("checked",n)},c}(),{$:n}=window;n((()=>{new c}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,